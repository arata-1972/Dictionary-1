// =======================================================
// This file is auto generated by [Convert Excel To .plist and .sqlite] convertor,
// do not edit by youself!
// >>>> by HuMinghua <<<<  Jan 26, 2016, 12:16:12 PM
// ======================================================

package database;

import android.content.Context;
import android.database.SQLException;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteException;
import android.database.sqlite.SQLiteOpenHelper;
import android.util.Log;

import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;

public class DataHelper extends SQLiteOpenHelper {

    private static String TAG = "DBHelper";

    private static String DB_NAME = "Dis1Test2.db";

    private Context context;
    private SQLiteDatabase database;
    private SQLiteDatabase db;

    public DataHelper(Context context) {
        super(context, DB_NAME, null, 1);
        this.context = context;
    }


    @Override
    public void onCreate(SQLiteDatabase db) {
        Log.d(TAG, "OnDatabaseCreate..");
    }

    @Override
    public void onUpgrade(SQLiteDatabase db, int oldVersion, int newVersion) {
        Log.d(TAG, "Upgrade..Database...oldVersion:" + oldVersion + "  newVersion:" + newVersion);
    }

    @Override
    public synchronized void close() {
        if (database != null)
            database.close();

        super.close();
    }

    public String DB_PATH() {
        return "/data/data/" + context.getApplicationContext().getPackageName() + "/databases/";
    }

    public void createDataBase() throws IOException {

        if(!checkDataBaseExists()){
            //create empty sqlite file
            getReadableDatabase();
            //copy file
            copyDataBaseFromAsset();
        }
    }

    private boolean checkDataBaseExists() {

        SQLiteDatabase checkDB = null;
        try {
            checkDB = SQLiteDatabase.openDatabase(DB_PATH() + DB_NAME, null, SQLiteDatabase.NO_LOCALIZED_COLLATORS);
        } catch (SQLiteException e) {

            return checkDB != null ? true : false;
//            e.printStackTrace();
        }

        if (checkDB != null) {
            checkDB.close();
        }

        return checkDB != null ? true : false;
    }


    private void copyDataBaseFromAsset() throws IOException {

        InputStream mInput = context.getAssets().open(DB_NAME);
        String outFileName = DB_PATH() + DB_NAME;
        OutputStream mOutput = new FileOutputStream(outFileName);

        // copy file
        byte[] buffer = new byte[1024];
        int size;
        while ((size = mInput.read(buffer)) > 0) {
            mOutput.write(buffer, 0, size);
        }

        mOutput.flush();
        mOutput.close();
        mInput.close();
    }

   final void deleteDataBaseIfExist() {
        File file = new File(DB_PATH(), DB_NAME);
        if (file.exists()) {
            file.delete();
        }
    }

    public SQLiteDatabase openDataBaseWithReadOnly() throws SQLException {
        return SQLiteDatabase.openDatabase(DB_PATH() + DB_NAME, null, SQLiteDatabase.OPEN_READONLY | SQLiteDatabase.NO_LOCALIZED_COLLATORS);
    }

    public SQLiteDatabase openDataBaseWithWritable() throws SQLException {
        return SQLiteDatabase.openDatabase(DB_PATH() + DB_NAME, null, SQLiteDatabase.OPEN_READWRITE);
    }



}

